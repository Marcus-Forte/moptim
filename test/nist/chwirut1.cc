#include <gtest/gtest.h>

#include <Eigen/Dense>
#include <LevenbergMarquardt.hh>

#include "ConsoleLogger.hh"
#include "NumericalCost.hh"

const static std::vector<double> y_data{
    92.9000E0, 78.7000E0, 64.2000E0, 64.9000E0, 57.1000E0, 43.3000E0, 31.1000E0, 23.6000E0, 31.0500E0, 23.7750E0,
    17.7375E0, 13.8000E0, 11.5875E0, 9.4125E0,  7.7250E0,  7.3500E0,  8.0250E0,  90.6000E0, 76.9000E0, 71.6000E0,
    63.6000E0, 54.0000E0, 39.2000E0, 29.3000E0, 21.4000E0, 29.1750E0, 22.1250E0, 17.5125E0, 14.2500E0, 9.4500E0,
    9.1500E0,  7.9125E0,  8.4750E0,  6.1125E0,  80.0000E0, 79.0000E0, 63.8000E0, 57.2000E0, 53.2000E0, 42.5000E0,
    26.8000E0, 20.4000E0, 26.8500E0, 21.0000E0, 16.4625E0, 12.5250E0, 10.5375E0, 8.5875E0,  7.1250E0,  6.1125E0,
    5.9625E0,  74.1000E0, 67.3000E0, 60.8000E0, 55.5000E0, 50.3000E0, 41.0000E0, 29.4000E0, 20.4000E0, 29.3625E0,
    21.1500E0, 16.7625E0, 13.2000E0, 10.8750E0, 8.1750E0,  7.3500E0,  5.9625E0,  5.6250E0,  81.5000E0, 62.4000E0,
    32.5000E0, 12.4100E0, 13.1200E0, 15.5600E0, 5.6300E0,  78.0000E0, 59.9000E0, 33.2000E0, 13.8400E0, 12.7500E0,
    14.6200E0, 3.9400E0,  76.8000E0, 61.0000E0, 32.9000E0, 13.8700E0, 11.8100E0, 13.3100E0, 5.4400E0,  78.0000E0,
    63.5000E0, 33.8000E0, 12.5600E0, 5.6300E0,  12.7500E0, 13.1200E0, 5.4400E0,  76.8000E0, 60.0000E0, 47.8000E0,
    32.0000E0, 22.2000E0, 22.5700E0, 18.8200E0, 13.9500E0, 11.2500E0, 9.0000E0,  6.6700E0,  75.8000E0, 62.0000E0,
    48.8000E0, 35.2000E0, 20.0000E0, 20.3200E0, 19.3100E0, 12.7500E0, 10.4200E0, 7.3100E0,  7.4200E0,  70.5000E0,
    59.5000E0, 48.5000E0, 35.8000E0, 21.0000E0, 21.6700E0, 21.0000E0, 15.6400E0, 8.1700E0,  8.5500E0,  10.1200E0,
    78.0000E0, 66.0000E0, 62.0000E0, 58.0000E0, 47.7000E0, 37.8000E0, 20.2000E0, 21.0700E0, 13.8700E0, 9.6700E0,
    7.7600E0,  5.4400E0,  4.8700E0,  4.0100E0,  3.7500E0,  24.1900E0, 25.7600E0, 18.0700E0, 11.8100E0, 12.0700E0,
    16.1200E0, 70.8000E0, 54.7000E0, 48.0000E0, 39.8000E0, 29.8000E0, 23.7000E0, 29.6200E0, 23.8100E0, 17.7000E0,
    11.5500E0, 12.0700E0, 8.7400E0,  80.7000E0, 61.3000E0, 47.5000E0, 29.0000E0, 24.0000E0, 17.7000E0, 24.5600E0,
    18.6700E0, 16.2400E0, 8.7400E0,  7.8700E0,  8.5100E0,  66.7000E0, 59.2000E0, 40.8000E0, 30.7000E0, 25.7000E0,
    16.3000E0, 25.9900E0, 16.9500E0, 13.3500E0, 8.6200E0,  7.2000E0,  6.6400E0,  13.6900E0, 81.0000E0, 64.5000E0,
    35.5000E0, 13.3100E0, 4.8700E0,  12.9400E0, 5.0600E0,  15.1900E0, 14.6200E0, 15.6400E0, 25.5000E0, 25.9500E0,
    81.7000E0, 61.6000E0, 29.8000E0, 29.8100E0, 17.1700E0, 10.3900E0, 28.4000E0, 28.6900E0, 81.3000E0, 60.9000E0,
    16.6500E0, 10.0500E0, 28.9000E0, 28.9500E0};

const static std::vector<double> x_data{
    0.5000E0, 0.6250E0, 0.7500E0, 0.8750E0, 1.0000E0, 1.2500E0, 1.7500E0, 2.2500E0, 1.7500E0, 2.2500E0, 2.7500E0,
    3.2500E0, 3.7500E0, 4.2500E0, 4.7500E0, 5.2500E0, 5.7500E0, 0.5000E0, 0.6250E0, 0.7500E0, 0.8750E0, 1.0000E0,
    1.2500E0, 1.7500E0, 2.2500E0, 1.7500E0, 2.2500E0, 2.7500E0, 3.2500E0, 3.7500E0, 4.2500E0, 4.7500E0, 5.2500E0,
    5.7500E0, 0.5000E0, 0.6250E0, 0.7500E0, 0.8750E0, 1.0000E0, 1.2500E0, 1.7500E0, 2.2500E0, 1.7500E0, 2.2500E0,
    2.7500E0, 3.2500E0, 3.7500E0, 4.2500E0, 4.7500E0, 5.2500E0, 5.7500E0, 0.5000E0, 0.6250E0, 0.7500E0, 0.8750E0,
    1.0000E0, 1.2500E0, 1.7500E0, 2.2500E0, 1.7500E0, 2.2500E0, 2.7500E0, 3.2500E0, 3.7500E0, 4.2500E0, 4.7500E0,
    5.2500E0, 5.7500E0, .5000E0,  .7500E0,  1.5000E0, 3.0000E0, 3.0000E0, 3.0000E0, 6.0000E0, .5000E0,  .7500E0,
    1.5000E0, 3.0000E0, 3.0000E0, 3.0000E0, 6.0000E0, .5000E0,  .7500E0,  1.5000E0, 3.0000E0, 3.0000E0, 3.0000E0,
    6.0000E0, .5000E0,  .7500E0,  1.5000E0, 3.0000E0, 6.0000E0, 3.0000E0, 3.0000E0, 6.0000E0, .5000E0,  .7500E0,
    1.0000E0, 1.5000E0, 2.0000E0, 2.0000E0, 2.5000E0, 3.0000E0, 4.0000E0, 5.0000E0, 6.0000E0, .5000E0,  .7500E0,
    1.0000E0, 1.5000E0, 2.0000E0, 2.0000E0, 2.5000E0, 3.0000E0, 4.0000E0, 5.0000E0, 6.0000E0, .5000E0,  .7500E0,
    1.0000E0, 1.5000E0, 2.0000E0, 2.0000E0, 2.5000E0, 3.0000E0, 4.0000E0, 5.0000E0, 6.0000E0, .5000E0,  .6250E0,
    .7500E0,  .8750E0,  1.0000E0, 1.2500E0, 2.2500E0, 2.2500E0, 2.7500E0, 3.2500E0, 3.7500E0, 4.2500E0, 4.7500E0,
    5.2500E0, 5.7500E0, 3.0000E0, 3.0000E0, 3.0000E0, 3.0000E0, 3.0000E0, 3.0000E0, .5000E0,  .7500E0,  1.0000E0,
    1.5000E0, 2.0000E0, 2.5000E0, 2.0000E0, 2.5000E0, 3.0000E0, 4.0000E0, 5.0000E0, 6.0000E0, .5000E0,  .7500E0,
    1.0000E0, 1.5000E0, 2.0000E0, 2.5000E0, 2.0000E0, 2.5000E0, 3.0000E0, 4.0000E0, 5.0000E0, 6.0000E0, .5000E0,
    .7500E0,  1.0000E0, 1.5000E0, 2.0000E0, 2.5000E0, 2.0000E0, 2.5000E0, 3.0000E0, 4.0000E0, 5.0000E0, 6.0000E0,
    3.0000E0, .5000E0,  .7500E0,  1.5000E0, 3.0000E0, 6.0000E0, 3.0000E0, 6.0000E0, 3.0000E0, 3.0000E0, 3.0000E0,
    1.7500E0, 1.7500E0, .5000E0,  .7500E0,  1.7500E0, 1.7500E0, 2.7500E0, 3.7500E0, 1.7500E0, 1.7500E0, .5000E0,
    .7500E0,  2.7500E0, 3.7500E0, 1.7500E0, 1.7500E0};

struct Model : public IModel {
  void setup(const double* x) override {
    x_[0] = x[0];
    x_[1] = x[1];
    x_[2] = x[2];
  }

  void f(const double* input, const double* measurement, double* f_x) override {
    const auto num = std::exp(-x_[0] * input[0]);
    const auto den = x_[1] + x_[2] * input[0];
    f_x[0] = measurement[0] - num / den;
  }
  double x_[3];
};

TEST(chwirut1, chwirut1) {
  Eigen::VectorXd x0{{0.1, 0.01, 0.02}};
  const auto model = std::make_shared<Model>();
  auto cost = std::make_shared(x_data_.data(), y_data_.data(), x_data_.size(), 1, model);
  const auto logger = std::make_shared<ConsoleLogger>();
  logger->setLevel(ILog::Level::DEBUG);
  LevenbergMarquardt solver(logger);
  solver.setMaxIterations(100);
  solver.addCost(cost);

  solver.optimize(x0);

  EXPECT_NEAR(x0[0], 1.9027818370E-01, 1e-3);
  EXPECT_NEAR(x0[1], 6.1314004477E-03, 1e-3);
  EXPECT_NEAR(x0[2], 1.0530908399E-02, 1e-3);
}